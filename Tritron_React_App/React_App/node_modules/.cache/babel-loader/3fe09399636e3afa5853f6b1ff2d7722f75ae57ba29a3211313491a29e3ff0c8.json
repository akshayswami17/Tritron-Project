{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// const UpdateDiscountedPricePage = () => {\n//   const [categories, setCategories] = useState([]);\n//   const [brands, setBrands] = useState([]);\n//   const [models, setModels] = useState([]);\n//   const [products, setProducts] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState('');\n//   const [selectedBrand, setSelectedBrand] = useState('');\n//   const [selectedModel, setSelectedModel] = useState('');\n//   const [discountValue, setDiscountValue] = useState('');\n//   const [selectedProductId, setSelectedProductId] = useState(null);\n//   useEffect(() => {\n//     // Fetch categories on component mount\n//     fetch('http://localhost:8080/getAllCategories')\n//       .then(response => response.json())\n//       .then(data => setCategories(data))\n//       .catch(error => console.error('Error fetching categories:', error));\n//   }, []);\n//   const handleCategoryChange = (event) => {\n//     const selectedCategoryId = event.target.value;\n//     setSelectedCategory(selectedCategoryId);\n//   };\n//   useEffect(() => {\n//     // Fetch all brands\n//     fetch('http://localhost:8080/getAllBrands')\n//       .then(response => response.json())\n//       .then(data => setBrands(data))\n//       .catch(error => console.error('Error fetching brands:', error));\n//   }, [selectedCategory]);\n//   const handleBrandChange = (event) => {\n//     const selectedBrandId = event.target.value;\n//     setSelectedBrand(selectedBrandId);\n//     // Fetch models based on selected brand\n//     fetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`)\n//       .then(response => response.json())\n//       .then(data => setModels(data))\n//       .catch(error => console.error('Error fetching models:', error));\n//   };\n//   const handleModelChange = (event) => {\n//     const selectedModelId = event.target.value;\n//     setSelectedModel(selectedModelId);\n//     // Fetch products based on selected model\n//     fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\n//       .then(response => response.json())\n//       .then(data => setProducts(data))\n//       .catch(error => console.error('Error fetching products:', error));\n//   };\n//   const handleDiscountValueChange = (event) => {\n//     setDiscountValue(event.target.value);\n//   };\n//   const handleSetDiscount = () => {\n//     // Assuming 'pid' is the product id and 'dp' is the discounted price\n//     const requestBody = {\n//       pid: selectedProductId,\n//       dp: discountValue\n//     };\n//     // Update discounted price on the backend\n//     fetch('http://localhost:8080/updateDiscountedPrice', {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         // Add any additional headers if needed\n//       },\n//       body: JSON.stringify(requestBody),\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           console.log('Discounted price updated successfully');\n//         } else {\n//           console.error('Failed to update discounted price');\n//         }\n//       })\n//       .catch(error => console.error('Error updating discounted price:', error));\n//   };\n//   return (\n//     <div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Product ID</th>\n//             <th>Model ID</th>\n//             <th>Base Price</th>\n//             <th>Discounted Price</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {products.map(product => (\n//             <tr key={product.product_id}>\n//               <td>{product.product_id}</td>\n//               <td>{product.model_id}</td>\n//               <td>{product.base_price}</td>\n//               <td>{product.discounted_price}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div>\n//         <label>Select Category:</label>\n//         <select value={selectedCategory} onChange={handleCategoryChange}>\n//           <option value=\"\">Select Category</option>\n//           {categories.map(category => (\n//             <option key={category.id} value={category.id}>{category.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div>\n//         <label>Select Brand:</label>\n//         <select value={selectedBrand} onChange={handleBrandChange}>\n//           <option value=\"\">Select Brand</option>\n//           {brands.map(brand => (\n//             <option key={brand.id} value={brand.id}>{brand.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div>\n//         <label>Select Model:</label>\n//         <select value={selectedModel} onChange={handleModelChange}>\n//           <option value=\"\">Select Model</option>\n//           {models.map(model => (\n//             <option key={model.id} value={model.id}>{model.name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div>\n//         <label>Discount Value:</label>\n//         <input type=\"text\" value={discountValue} onChange={handleDiscountValueChange} />\n//       </div>\n//       <button onClick={handleSetDiscount}>Set New Discounted Value</button>\n//     </div>\n//   );\n// };\n// export default UpdateDiscountedPricePage;\n////////////////////////////////////////\n// import React, { useState, useEffect } from 'react';\n// import './UpdateDiscountedPrice.css';\n// const UpdateDiscountedPricePage = () => {\n//   const [categories, setCategories] = useState([]);\n//   const [brands, setBrands] = useState([]);\n//   const [models, setModels] = useState([]);\n//   const [products, setProducts] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState('');\n//   const [selectedBrand, setSelectedBrand] = useState('');\n//   const [selectedModel, setSelectedModel] = useState(0);\n//   const [discountValue, setDiscountValue] = useState('');\n//   const [selectedProductId, setSelectedProductId] = useState(null);\n//   useEffect(() => {\n//     // Fetch categories on component mount\n//     fetch('http://localhost:8080/getAllCategories')\n//       .then(response => response.json())\n//       .then(data => setCategories(data))\n//       .catch(error => console.error('Error fetching categories:', error));\n//       fetch('http://localhost:8080/getAllBrands')\n//       .then(response => response.json())\n//       .then(data => setBrands(data))\n//       .catch(error => console.error('Error fetching brands:', error));\n//   }, []);\n//   const handleCategoryChange = (event) => {\n//     const selectedCategoryId = event.target.value;\n//     setSelectedCategory(selectedCategoryId);\n//   };\n//   /*useEffect(() => {\n//     // Fetch all brands\n//     fetch('http://localhost:8080/getAllBrands')\n//       .then(response => response.json())\n//       .then(data => setBrands(data))\n//       .catch(error => console.error('Error fetching brands:', error));\n//   }, [selectedCategory]); */\n//   const handleBrandChange = (event) => {\n//     const selectedBrandId = event.target.value;\n//     setSelectedBrand(selectedBrandId);\n//     // Fetch models based on selected brand\n//     fetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`)\n//       .then(response => response.json())\n//       .then(data => setModels(data))\n//       .catch(error => console.error('Error fetching models:', error));\n//   };\n//   // const handleModelChange = (event) => {\n//   //   const selectedModelId = event.target.value;\n//   //   setSelectedModel(selectedModelId);\n//   //   // Fetch products based on selected model\n//   //   fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\n//   //     .then(response => response.json())\n//   //     .then(data => setProducts(data))\n//   //     .catch(error => console.error('Error fetching products:', error));\n//   // };\n//   const handleModelChange = (event) => {\n//   const selectedModelId = event.target.value;\n//   setSelectedModel(selectedModelId);\n//   // Fetch products based on selected model\n//   fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\n//     .then(response => response.json())\n//     .then(data => setProducts(data))\n//     .catch(error => console.error('Error fetching products:', error));\n//   // Reset models state to an empty array to avoid \"map is not a function\" error\n//   //setModels([]);\n// };\n//   const handleDiscountValueChange = (event) => {\n//     setDiscountValue(event.target.value);\n//   };\n//   const handleSetDiscount = () => {\n//     // Assuming 'pid' is the product id and 'dp' is the discounted price\n//     const requestBody = {\n//       pid: selectedProductId,\n//       dp: discountValue\n//     };\n//     // Update discounted price on the backend\n//     fetch('http://localhost:8080/updateDiscountedPrice', {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         // Add any additional headers if needed\n//       },\n//       body: JSON.stringify({\n//          mid: selectedModel,\n//          sid:  ,\n//       dp: discountValue\n//       }),\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           console.log('Discounted price updated successfully');\n//         } else {\n//           console.error('Failed to update discounted price');\n//         }\n//       })\n//       .catch(error => console.error('Error updating discounted price:', error));\n//   };\n//   return (\n//     <div>\n//       {/* <table>\n//         <thead>\n//           <tr>\n//             <th>Product ID</th>\n//             <th>Model ID</th>\n//             <th>Base Price</th>\n//             <th>Discounted Price</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {products.map(product => (\n//             <tr key={product.product_id}>\n//               <td>{product.product_id}</td>\n//               <td>{product.model_id}</td>\n//               <td>{product.base_price}</td>\n//               <td>{product.discounted_price}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table> */}\n// <div className=\"form-group\">\n//         <label>Select Category:</label>\n//         <select className=\"form-control\" value={selectedCategory} onChange={handleCategoryChange}>\n//           <option value=\"\">Select Category</option>\n//           {categories.map(category => (\n//             <option key={category.categoryId} value={category.categoryId}>{category.category_Name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div className=\"form-group\">\n//         <label>Select Brand:</label>\n//         <select className=\"form-control\" value={selectedBrand} onChange={handleBrandChange}>\n//           <option value=\"\">Select Brand</option>\n//           {brands.map(brand => (\n//             <option key={brand.brand_id} value={brand.brand_id}>{brand.brand_name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <div className=\"form-group\">\n//         <label>Select Model:</label>\n//         <select className=\"form-control\" value={selectedModel} onChange={handleModelChange}>\n//           <option value=\"\">Select Model</option>\n//           {models.map(model => (\n//             <option key={model.model_Id} value={model.model_Id}>{model.model_Name}</option>\n//           ))}\n//         </select>\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Product ID</th>\n//             <th>Model ID</th>\n//             <th>Base Price</th>\n//             <th>Discounted Price</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {products.map(product => (\n//             <tr key={product.product_id}>\n//               <td>{product.product_id}</td>\n//               <td>{product.model_id}</td>\n//               <td>{product.base_price}</td>\n//               <td>{product.discounted_price}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div>\n//         <label>Discount Value:</label>\n//         <input type=\"text\" value={discountValue} onChange={handleDiscountValueChange} />\n//       </div>\n//       <button onClick={handleSetDiscount}>Set New Discounted Value</button>\n//       <p> {JSON.stringify(models)}</p>\n//     </div>\n//   );\n// };\n// export default UpdateDiscountedPricePage;\n//23-02-2024 at 11:02\nimport React,{useState,useEffect}from'react';import'../CSS Files/UpdateDiscountedPrice.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const UpdateDiscountedPricePage=()=>{const[categories,setCategories]=useState([]);const[brands,setBrands]=useState([]);const[models,setModels]=useState([]);const[products,setProducts]=useState([]);const[selectedCategory,setSelectedCategory]=useState('');const[selectedBrand,setSelectedBrand]=useState('');const[selectedModel,setSelectedModel]=useState('');const[discountValue,setDiscountValue]=useState('');const[selectedProductId,setSelectedProductId]=useState(null);useEffect(()=>{// Fetch categories on component mount\nfetch('http://localhost:8080/getAllCategories').then(response=>response.json()).then(data=>setCategories(data)).catch(error=>console.error('Error fetching categories:',error));// Fetch all brands\nfetch('http://localhost:8080/getAllBrands').then(response=>response.json()).then(data=>setBrands(data)).catch(error=>console.error('Error fetching brands:',error));},[]);const handleCategoryChange=event=>{const selectedCategoryId=event.target.value;setSelectedCategory(selectedCategoryId);};const handleBrandChange=event=>{const selectedBrandId=event.target.value;setSelectedBrand(selectedBrandId);// Fetch models based on selected brand\nfetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`).then(response=>response.json()).then(data=>setModels(data)).catch(error=>console.error('Error fetching models:',error));};const handleModelChange=event=>{const selectedModelId=event.target.value;setSelectedModel(selectedModelId);// Fetch products based on selected model\nfetch(`http://localhost:8080/getProducts?id=${selectedModelId}`).then(response=>response.json()).then(data=>setProducts(data)).catch(error=>console.error('Error fetching products:',error));};const handleDiscountValueChange=event=>{setDiscountValue(event.target.value);};const handleSetDiscount=()=>{// Assuming 'pid' is the product id and 'dp' is the discounted price\nconst requestBody={pid:selectedProductId,dp:discountValue};// Update discounted price on the backend\nfetch('http://localhost:8080/updateDiscountedPrice',{method:'PUT',headers:{'Content-Type':'application/json'// Add any additional headers if needed\n},body:JSON.stringify({mid:selectedModel,sid:selectedProductId,dp:discountValue})}).then(response=>{if(response.ok){console.log('Discounted price updated successfully');}else{console.error('Failed to update discounted price');}}).catch(error=>console.error('Error updating discounted price:',error));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Category:\"}),/*#__PURE__*/_jsxs(\"select\",{className:\"form-control\",value:selectedCategory,onChange:handleCategoryChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Category\"}),categories.map(category=>/*#__PURE__*/_jsx(\"option\",{value:category.categoryId,children:category.category_Name},category.categoryId))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Brand:\"}),/*#__PURE__*/_jsxs(\"select\",{className:\"form-control\",value:selectedBrand,onChange:handleBrandChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Brand\"}),brands.map(brand=>/*#__PURE__*/_jsx(\"option\",{value:brand.brand_id,children:brand.brand_name},brand.brand_id))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Model:\"}),/*#__PURE__*/_jsxs(\"select\",{className:\"form-control\",value:selectedModel,onChange:handleModelChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Model\"}),models.map(model=>/*#__PURE__*/_jsx(\"option\",{value:model.model_Id,children:model.model_Name},model.model_Id))]})]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Product ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Model ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Base Price\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Discounted Price\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:products.map(product=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:product.product_id}),/*#__PURE__*/_jsx(\"td\",{children:product.model_id}),/*#__PURE__*/_jsx(\"td\",{children:product.base_price}),/*#__PURE__*/_jsx(\"td\",{children:product.discounted_price})]},product.product_id))})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Discount Value:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:discountValue,onChange:handleDiscountValueChange})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSetDiscount,children:\"Set New Discounted Value\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\" \",JSON.stringify(models)]})]});};export default UpdateDiscountedPricePage;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","UpdateDiscountedPricePage","categories","setCategories","brands","setBrands","models","setModels","products","setProducts","selectedCategory","setSelectedCategory","selectedBrand","setSelectedBrand","selectedModel","setSelectedModel","discountValue","setDiscountValue","selectedProductId","setSelectedProductId","fetch","then","response","json","data","catch","error","console","handleCategoryChange","event","selectedCategoryId","target","value","handleBrandChange","selectedBrandId","handleModelChange","selectedModelId","handleDiscountValueChange","handleSetDiscount","requestBody","pid","dp","method","headers","body","JSON","stringify","mid","sid","ok","log","children","className","onChange","map","category","categoryId","category_Name","brand","brand_id","brand_name","model","model_Id","model_Name","product","product_id","model_id","base_price","discounted_price","type","onClick"],"sources":["A:/Tritron Project/Tritron_React_App/React_App/src/components/UpdateDiscountedPrice.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const UpdateDiscountedPricePage = () => {\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [brands, setBrands] = useState([]);\r\n//   const [models, setModels] = useState([]);\r\n//   const [products, setProducts] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState('');\r\n//   const [selectedBrand, setSelectedBrand] = useState('');\r\n//   const [selectedModel, setSelectedModel] = useState('');\r\n//   const [discountValue, setDiscountValue] = useState('');\r\n//   const [selectedProductId, setSelectedProductId] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch categories on component mount\r\n//     fetch('http://localhost:8080/getAllCategories')\r\n//       .then(response => response.json())\r\n//       .then(data => setCategories(data))\r\n//       .catch(error => console.error('Error fetching categories:', error));\r\n//   }, []);\r\n\r\n//   const handleCategoryChange = (event) => {\r\n//     const selectedCategoryId = event.target.value;\r\n//     setSelectedCategory(selectedCategoryId);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Fetch all brands\r\n//     fetch('http://localhost:8080/getAllBrands')\r\n//       .then(response => response.json())\r\n//       .then(data => setBrands(data))\r\n//       .catch(error => console.error('Error fetching brands:', error));\r\n//   }, [selectedCategory]);\r\n\r\n//   const handleBrandChange = (event) => {\r\n//     const selectedBrandId = event.target.value;\r\n//     setSelectedBrand(selectedBrandId);\r\n\r\n//     // Fetch models based on selected brand\r\n//     fetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`)\r\n//       .then(response => response.json())\r\n//       .then(data => setModels(data))\r\n//       .catch(error => console.error('Error fetching models:', error));\r\n//   };\r\n\r\n//   const handleModelChange = (event) => {\r\n//     const selectedModelId = event.target.value;\r\n//     setSelectedModel(selectedModelId);\r\n\r\n//     // Fetch products based on selected model\r\n//     fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\r\n//       .then(response => response.json())\r\n//       .then(data => setProducts(data))\r\n//       .catch(error => console.error('Error fetching products:', error));\r\n//   };\r\n\r\n//   const handleDiscountValueChange = (event) => {\r\n//     setDiscountValue(event.target.value);\r\n//   };\r\n\r\n//   const handleSetDiscount = () => {\r\n//     // Assuming 'pid' is the product id and 'dp' is the discounted price\r\n//     const requestBody = {\r\n//       pid: selectedProductId,\r\n//       dp: discountValue\r\n//     };\r\n\r\n//     // Update discounted price on the backend\r\n//     fetch('http://localhost:8080/updateDiscountedPrice', {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         // Add any additional headers if needed\r\n//       },\r\n//       body: JSON.stringify(requestBody),\r\n//     })\r\n//       .then(response => {\r\n//         if (response.ok) {\r\n//           console.log('Discounted price updated successfully');\r\n//         } else {\r\n//           console.error('Failed to update discounted price');\r\n//         }\r\n//       })\r\n//       .catch(error => console.error('Error updating discounted price:', error));\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Product ID</th>\r\n//             <th>Model ID</th>\r\n//             <th>Base Price</th>\r\n//             <th>Discounted Price</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {products.map(product => (\r\n//             <tr key={product.product_id}>\r\n//               <td>{product.product_id}</td>\r\n//               <td>{product.model_id}</td>\r\n//               <td>{product.base_price}</td>\r\n//               <td>{product.discounted_price}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <div>\r\n//         <label>Select Category:</label>\r\n//         <select value={selectedCategory} onChange={handleCategoryChange}>\r\n//           <option value=\"\">Select Category</option>\r\n//           {categories.map(category => (\r\n//             <option key={category.id} value={category.id}>{category.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label>Select Brand:</label>\r\n//         <select value={selectedBrand} onChange={handleBrandChange}>\r\n//           <option value=\"\">Select Brand</option>\r\n//           {brands.map(brand => (\r\n//             <option key={brand.id} value={brand.id}>{brand.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label>Select Model:</label>\r\n//         <select value={selectedModel} onChange={handleModelChange}>\r\n//           <option value=\"\">Select Model</option>\r\n//           {models.map(model => (\r\n//             <option key={model.id} value={model.id}>{model.name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label>Discount Value:</label>\r\n//         <input type=\"text\" value={discountValue} onChange={handleDiscountValueChange} />\r\n//       </div>\r\n\r\n//       <button onClick={handleSetDiscount}>Set New Discounted Value</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UpdateDiscountedPricePage;\r\n\r\n////////////////////////////////////////\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './UpdateDiscountedPrice.css';\r\n\r\n\r\n// const UpdateDiscountedPricePage = () => {\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [brands, setBrands] = useState([]);\r\n//   const [models, setModels] = useState([]);\r\n//   const [products, setProducts] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState('');\r\n//   const [selectedBrand, setSelectedBrand] = useState('');\r\n//   const [selectedModel, setSelectedModel] = useState(0);\r\n//   const [discountValue, setDiscountValue] = useState('');\r\n//   const [selectedProductId, setSelectedProductId] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch categories on component mount\r\n//     fetch('http://localhost:8080/getAllCategories')\r\n//       .then(response => response.json())\r\n//       .then(data => setCategories(data))\r\n//       .catch(error => console.error('Error fetching categories:', error));\r\n\r\n//       fetch('http://localhost:8080/getAllBrands')\r\n//       .then(response => response.json())\r\n//       .then(data => setBrands(data))\r\n//       .catch(error => console.error('Error fetching brands:', error));\r\n//   }, []);\r\n\r\n//   const handleCategoryChange = (event) => {\r\n//     const selectedCategoryId = event.target.value;\r\n//     setSelectedCategory(selectedCategoryId);\r\n//   };\r\n\r\n//   /*useEffect(() => {\r\n//     // Fetch all brands\r\n//     fetch('http://localhost:8080/getAllBrands')\r\n//       .then(response => response.json())\r\n//       .then(data => setBrands(data))\r\n//       .catch(error => console.error('Error fetching brands:', error));\r\n//   }, [selectedCategory]); */\r\n\r\n//   const handleBrandChange = (event) => {\r\n//     const selectedBrandId = event.target.value;\r\n//     setSelectedBrand(selectedBrandId);\r\n\r\n//     // Fetch models based on selected brand\r\n//     fetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`)\r\n//       .then(response => response.json())\r\n//       .then(data => setModels(data))\r\n//       .catch(error => console.error('Error fetching models:', error));\r\n//   };\r\n\r\n//   // const handleModelChange = (event) => {\r\n//   //   const selectedModelId = event.target.value;\r\n//   //   setSelectedModel(selectedModelId);\r\n\r\n//   //   // Fetch products based on selected model\r\n//   //   fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\r\n//   //     .then(response => response.json())\r\n//   //     .then(data => setProducts(data))\r\n//   //     .catch(error => console.error('Error fetching products:', error));\r\n//   // };\r\n//   const handleModelChange = (event) => {\r\n//   const selectedModelId = event.target.value;\r\n//   setSelectedModel(selectedModelId);\r\n\r\n//   // Fetch products based on selected model\r\n//   fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\r\n//     .then(response => response.json())\r\n//     .then(data => setProducts(data))\r\n//     .catch(error => console.error('Error fetching products:', error));\r\n\r\n//   // Reset models state to an empty array to avoid \"map is not a function\" error\r\n//   //setModels([]);\r\n// };\r\n\r\n\r\n//   const handleDiscountValueChange = (event) => {\r\n//     setDiscountValue(event.target.value);\r\n//   };\r\n\r\n//   const handleSetDiscount = () => {\r\n//     // Assuming 'pid' is the product id and 'dp' is the discounted price\r\n//     const requestBody = {\r\n//       pid: selectedProductId,\r\n//       dp: discountValue\r\n//     };\r\n\r\n//     // Update discounted price on the backend\r\n//     fetch('http://localhost:8080/updateDiscountedPrice', {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         // Add any additional headers if needed\r\n//       },\r\n//       body: JSON.stringify({\r\n//          mid: selectedModel,\r\n//          sid:  ,\r\n//       dp: discountValue\r\n//       }),\r\n//     })\r\n//       .then(response => {\r\n//         if (response.ok) {\r\n//           console.log('Discounted price updated successfully');\r\n//         } else {\r\n//           console.error('Failed to update discounted price');\r\n//         }\r\n//       })\r\n//       .catch(error => console.error('Error updating discounted price:', error));\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Product ID</th>\r\n//             <th>Model ID</th>\r\n//             <th>Base Price</th>\r\n//             <th>Discounted Price</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {products.map(product => (\r\n//             <tr key={product.product_id}>\r\n//               <td>{product.product_id}</td>\r\n//               <td>{product.model_id}</td>\r\n//               <td>{product.base_price}</td>\r\n//               <td>{product.discounted_price}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table> */}\r\n\r\n// <div className=\"form-group\">\r\n//         <label>Select Category:</label>\r\n//         <select className=\"form-control\" value={selectedCategory} onChange={handleCategoryChange}>\r\n//           <option value=\"\">Select Category</option>\r\n//           {categories.map(category => (\r\n//             <option key={category.categoryId} value={category.categoryId}>{category.category_Name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div className=\"form-group\">\r\n//         <label>Select Brand:</label>\r\n//         <select className=\"form-control\" value={selectedBrand} onChange={handleBrandChange}>\r\n//           <option value=\"\">Select Brand</option>\r\n//           {brands.map(brand => (\r\n//             <option key={brand.brand_id} value={brand.brand_id}>{brand.brand_name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div className=\"form-group\">\r\n//         <label>Select Model:</label>\r\n//         <select className=\"form-control\" value={selectedModel} onChange={handleModelChange}>\r\n//           <option value=\"\">Select Model</option>\r\n//           {models.map(model => (\r\n//             <option key={model.model_Id} value={model.model_Id}>{model.model_Name}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Product ID</th>\r\n//             <th>Model ID</th>\r\n//             <th>Base Price</th>\r\n//             <th>Discounted Price</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {products.map(product => (\r\n//             <tr key={product.product_id}>\r\n//               <td>{product.product_id}</td>\r\n//               <td>{product.model_id}</td>\r\n//               <td>{product.base_price}</td>\r\n//               <td>{product.discounted_price}</td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       <div>\r\n//         <label>Discount Value:</label>\r\n//         <input type=\"text\" value={discountValue} onChange={handleDiscountValueChange} />\r\n//       </div>\r\n\r\n//       <button onClick={handleSetDiscount}>Set New Discounted Value</button>\r\n\r\n//       <p> {JSON.stringify(models)}</p>\r\n      \r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UpdateDiscountedPricePage;\r\n\r\n\r\n//23-02-2024 at 11:02\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../CSS Files/UpdateDiscountedPrice.css';\r\n\r\nconst UpdateDiscountedPricePage = () => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [brands, setBrands] = useState([]);\r\n  const [models, setModels] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState('');\r\n  const [selectedBrand, setSelectedBrand] = useState('');\r\n  const [selectedModel, setSelectedModel] = useState('');\r\n  const [discountValue, setDiscountValue] = useState('');\r\n  const [selectedProductId, setSelectedProductId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch categories on component mount\r\n    fetch('http://localhost:8080/getAllCategories')\r\n      .then(response => response.json())\r\n      .then(data => setCategories(data))\r\n      .catch(error => console.error('Error fetching categories:', error));\r\n\r\n    // Fetch all brands\r\n    fetch('http://localhost:8080/getAllBrands')\r\n      .then(response => response.json())\r\n      .then(data => setBrands(data))\r\n      .catch(error => console.error('Error fetching brands:', error));\r\n  }, []);\r\n\r\n  const handleCategoryChange = (event) => {\r\n    const selectedCategoryId = event.target.value;\r\n    setSelectedCategory(selectedCategoryId);\r\n  };\r\n\r\n  const handleBrandChange = (event) => {\r\n    const selectedBrandId = event.target.value;\r\n    setSelectedBrand(selectedBrandId);\r\n\r\n    // Fetch models based on selected brand\r\n    fetch(`http://localhost:8080/getModels?categoryid=${selectedCategory}&brandid=${selectedBrandId}`)\r\n      .then(response => response.json())\r\n      .then(data => setModels(data))\r\n      .catch(error => console.error('Error fetching models:', error));\r\n  };\r\n\r\n  const handleModelChange = (event) => {\r\n    const selectedModelId = event.target.value;\r\n    setSelectedModel(selectedModelId);\r\n\r\n    // Fetch products based on selected model\r\n    fetch(`http://localhost:8080/getProducts?id=${selectedModelId}`)\r\n      .then(response => response.json())\r\n      .then(data => setProducts(data))\r\n      .catch(error => console.error('Error fetching products:', error));\r\n  };\r\n\r\n  const handleDiscountValueChange = (event) => {\r\n    setDiscountValue(event.target.value);\r\n  };\r\n\r\n  const handleSetDiscount = () => {\r\n    // Assuming 'pid' is the product id and 'dp' is the discounted price\r\n    const requestBody = {\r\n      pid: selectedProductId,\r\n      dp: discountValue\r\n    };\r\n\r\n    // Update discounted price on the backend\r\n    fetch('http://localhost:8080/updateDiscountedPrice', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // Add any additional headers if needed\r\n      },\r\n      body: JSON.stringify({\r\n        mid: selectedModel,\r\n        sid: selectedProductId,\r\n        dp: discountValue\r\n      }),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Discounted price updated successfully');\r\n        } else {\r\n          console.error('Failed to update discounted price');\r\n        }\r\n      })\r\n      .catch(error => console.error('Error updating discounted price:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <label>Select Category:</label>\r\n        <select className=\"form-control\" value={selectedCategory} onChange={handleCategoryChange}>\r\n          <option value=\"\">Select Category</option>\r\n          {categories.map(category => (\r\n            <option key={category.categoryId} value={category.categoryId}>{category.category_Name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Select Brand:</label>\r\n        <select className=\"form-control\" value={selectedBrand} onChange={handleBrandChange}>\r\n          <option value=\"\">Select Brand</option>\r\n          {brands.map(brand => (\r\n            <option key={brand.brand_id} value={brand.brand_id}>{brand.brand_name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label>Select Model:</label>\r\n        <select className=\"form-control\" value={selectedModel} onChange={handleModelChange}>\r\n          <option value=\"\">Select Model</option>\r\n          {models.map(model => (\r\n            <option key={model.model_Id} value={model.model_Id}>{model.model_Name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Product ID</th>\r\n            <th>Model ID</th>\r\n            <th>Base Price</th>\r\n            <th>Discounted Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {products.map(product => (\r\n            <tr key={product.product_id}>\r\n              <td>{product.product_id}</td>\r\n              <td>{product.model_id}</td>\r\n              <td>{product.base_price}</td>\r\n              <td>{product.discounted_price}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div>\r\n        <label>Discount Value:</label>\r\n        <input type=\"text\" value={discountValue} onChange={handleDiscountValueChange} />\r\n      </div>\r\n\r\n      <button onClick={handleSetDiscount}>Set New Discounted Value</button>\r\n\r\n      <p> {JSON.stringify(models)}</p>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateDiscountedPricePage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}