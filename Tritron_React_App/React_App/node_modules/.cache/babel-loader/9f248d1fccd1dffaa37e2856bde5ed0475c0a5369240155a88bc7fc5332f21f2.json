{"ast":null,"code":"// import { useReducer, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import '../CSS Files/FeedbackForm.css';\n\n// export default function FeedbackForm() {\n//     const init = {\n//         username: \"\",\n//         ratings: \"\",\n//         comments: \"\"\n//     }\n\n//     const reducer = (state, action) => {\n//         switch (action.type) {\n//             case 'update':\n//                 return { ...state, [action.fld]: action.val }\n//             case 'reset':\n//                 return init;\n//             default:\n//                 return state;\n//         }\n//     }\n\n//     const [feedback, dispatch] = useReducer(reducer, init);\n//     const [errorMsgs, setErrorMsgs] = useState(init);\n//     const [successMessage, setSuccessMessage] = useState('');\n\n//     const sendData = (e) => {\n//         e.preventDefault();\n//         const requiredFields = ['username', 'ratings', 'comments'];\n//         const newErrorMsgs = { ...errorMsgs };\n\n//         for (const field of requiredFields) {\n//             newErrorMsgs[field] = \"\";\n//         }\n\n//         for (const field of requiredFields) {\n//             if (!feedback[field]) {\n//                 newErrorMsgs[field] = \"This field is required\";\n//             }\n//         }\n\n//         setErrorMsgs(newErrorMsgs); // Update error messages\n\n//         for (const field of requiredFields) {\n//             if (newErrorMsgs[field]) {\n//                 return; // Exit if any error message is present\n//             }\n//         }\n\n//         // Send feedback data to backend\n//         fetch(\"http://localhost:8080/feedbackform\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify(feedback), // Pass the feedback object directly\n//         })\n//         .then(response => response.json())\n//         .then(data => {\n//             console.log('Success:', data);\n//             setSuccessMessage(\"Feedback submitted successfully!\");\n//             dispatch({ type: 'reset' }); // Clear form\n//         })\n//         .then(response => {\n//             console.log('Payment saved successfully:', response.data);\n//             navigate('/success'); // Navigate to the PaymentSuccess component\n//           })\n//         .catch((error) => {\n//             console.error('Error submitting feedback:', error);\n//         });\n//     }\n\n//     return (\n//         <div className=\"feedback-container\">\n//             <h1 className='feedback-heading'>Feedback Form</h1>\n//             <form>\n//                 <div className=\"form-group-fb\">\n//                     <label htmlFor=\"username\" className=\"form-label\">Username:</label>\n//                     <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\"\n//                         value={feedback.username}\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'username', val: e.target.value })}\n//                         required\n//                     />\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.username}</div>\n//                 </div>\n//                 <div className=\"form-group-fb\">\n//                     <label htmlFor=\"ratings\" className=\"form-label\">Ratings:</label>\n//                     <select className=\"form-control\" id=\"ratings\" name=\"ratings\"\n//                         value={feedback.ratings}\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'ratings', val: e.target.value })}\n//                         required\n//                     >\n//                         <option value=\"\">Select Rating</option>\n//                         <option value=\"Average\">Average</option>\n//                         <option value=\"Good\">Good</option>\n//                         <option value=\"Excellent\">Excellent</option>\n//                     </select>\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.ratings}</div>\n//                 </div>\n//                 <div className=\"form-group-fb\">\n//                     <label htmlFor=\"comments\" className=\"form-label\">Comments:</label>\n//                     <textarea className=\"form-control\" id=\"comments\" name=\"comments\"\n//                         value={feedback.comments}\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'comments', val: e.target.value })}\n//                         required\n//                     />\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.comments}</div>\n//                 </div>\n//                 <div className=\"form-row\">\n//                     <button type=\"reset\" className=\"btn btn-outline-danger mb-3\" onClick={() => dispatch({ type: 'reset' })}>Clear</button>\n//                     <button type=\"submit\" className=\"btn btn-outline-primary mb-3\" onClick={(e) => sendData(e)}>Submit</button>\n//                     {successMessage && <p className=\"text-success\">{successMessage}</p>}\n//                 </div>\n//             </form>\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["A:/Tritron Project/Tritron_React_App/React_App/src/components/FeedbackForm.js"],"sourcesContent":["// import { useReducer, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import '../CSS Files/FeedbackForm.css';\r\n\r\n// export default function FeedbackForm() {\r\n//     const init = {\r\n//         username: \"\",\r\n//         ratings: \"\",\r\n//         comments: \"\"\r\n//     }\r\n\r\n//     const reducer = (state, action) => {\r\n//         switch (action.type) {\r\n//             case 'update':\r\n//                 return { ...state, [action.fld]: action.val }\r\n//             case 'reset':\r\n//                 return init;\r\n//             default:\r\n//                 return state;\r\n//         }\r\n//     }\r\n\r\n//     const [feedback, dispatch] = useReducer(reducer, init);\r\n//     const [errorMsgs, setErrorMsgs] = useState(init);\r\n//     const [successMessage, setSuccessMessage] = useState('');\r\n\r\n//     const sendData = (e) => {\r\n//         e.preventDefault();\r\n//         const requiredFields = ['username', 'ratings', 'comments'];\r\n//         const newErrorMsgs = { ...errorMsgs };\r\n\r\n//         for (const field of requiredFields) {\r\n//             newErrorMsgs[field] = \"\";\r\n//         }\r\n\r\n//         for (const field of requiredFields) {\r\n//             if (!feedback[field]) {\r\n//                 newErrorMsgs[field] = \"This field is required\";\r\n//             }\r\n//         }\r\n\r\n//         setErrorMsgs(newErrorMsgs); // Update error messages\r\n\r\n//         for (const field of requiredFields) {\r\n//             if (newErrorMsgs[field]) {\r\n//                 return; // Exit if any error message is present\r\n//             }\r\n//         }\r\n\r\n//         // Send feedback data to backend\r\n//         fetch(\"http://localhost:8080/feedbackform\", {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify(feedback), // Pass the feedback object directly\r\n//         })\r\n//         .then(response => response.json())\r\n//         .then(data => {\r\n//             console.log('Success:', data);\r\n//             setSuccessMessage(\"Feedback submitted successfully!\");\r\n//             dispatch({ type: 'reset' }); // Clear form\r\n//         })\r\n//         .then(response => {\r\n//             console.log('Payment saved successfully:', response.data);\r\n//             navigate('/success'); // Navigate to the PaymentSuccess component\r\n//           })\r\n//         .catch((error) => {\r\n//             console.error('Error submitting feedback:', error);\r\n//         });\r\n//     }\r\n\r\n//     return (\r\n//         <div className=\"feedback-container\">\r\n//             <h1 className='feedback-heading'>Feedback Form</h1>\r\n//             <form>\r\n//                 <div className=\"form-group-fb\">\r\n//                     <label htmlFor=\"username\" className=\"form-label\">Username:</label>\r\n//                     <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\"\r\n//                         value={feedback.username}\r\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'username', val: e.target.value })}\r\n//                         required\r\n//                     />\r\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.username}</div>\r\n//                 </div>\r\n//                 <div className=\"form-group-fb\">\r\n//                     <label htmlFor=\"ratings\" className=\"form-label\">Ratings:</label>\r\n//                     <select className=\"form-control\" id=\"ratings\" name=\"ratings\"\r\n//                         value={feedback.ratings}\r\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'ratings', val: e.target.value })}\r\n//                         required\r\n//                     >\r\n//                         <option value=\"\">Select Rating</option>\r\n//                         <option value=\"Average\">Average</option>\r\n//                         <option value=\"Good\">Good</option>\r\n//                         <option value=\"Excellent\">Excellent</option>\r\n//                     </select>\r\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.ratings}</div>\r\n//                 </div>\r\n//                 <div className=\"form-group-fb\">\r\n//                     <label htmlFor=\"comments\" className=\"form-label\">Comments:</label>\r\n//                     <textarea className=\"form-control\" id=\"comments\" name=\"comments\"\r\n//                         value={feedback.comments}\r\n//                         onChange={(e) => dispatch({ type: 'update', fld: 'comments', val: e.target.value })}\r\n//                         required\r\n//                     />\r\n//                     <div className=\"error-msg\" style={{ color: 'red' }}>{errorMsgs.comments}</div>\r\n//                 </div>\r\n//                 <div className=\"form-row\">\r\n//                     <button type=\"reset\" className=\"btn btn-outline-danger mb-3\" onClick={() => dispatch({ type: 'reset' })}>Clear</button>\r\n//                     <button type=\"submit\" className=\"btn btn-outline-primary mb-3\" onClick={(e) => sendData(e)}>Submit</button>\r\n//                     {successMessage && <p className=\"text-success\">{successMessage}</p>}\r\n//                 </div>\r\n//             </form>\r\n//         </div>\r\n//     )\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}